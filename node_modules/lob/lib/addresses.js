// Generated by CoffeeScript 1.6.3
(function() {
  var Address,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = Address = (function(_super) {
    __extends(Address, _super);

    function Address(api) {
      this.api = api;
      this.path = "addresses";
      this;
    }

    Address.prototype.create = function(_object, callback) {
      var _i, _o, _ref;
      _ref = _object.address_lines != null;
      for (_i in _ref) {
        _o = _ref[_i];
        _object["address_line" + (++_i)] = _o;
      }
      delete _object.address_lines;
      this.api.request("POST", this.path, _object, callback);
      return this;
    };

    Address.prototype.update = function(_id, _object, callback) {
      if (typeof _id !== "string") {
        if (typeof _id === "function") {
          callback = _id;
        } else if (typeof _object === "function") {
          callback = _object;
        }
        if (typeof callback === "function") {
          callback("ID can not be empty for this operation", null);
        } else {
          throw new Error("ID can not be empty for this operation, Callback is empty");
        }
        return this;
      } else {
        this.api.request("POST", "" + this.path + "/" + _id, _object, callback);
        return this;
      }
    };

    Address.prototype["delete"] = function(_id, callback) {
      if (typeof _id !== "string") {
        if (typeof _id === "function") {
          callback = _id;
        }
        if (typeof callback === "function") {
          callback("ID can not be empty for this operation", null);
        } else {
          throw new Error("ID can not be empty for this operation, Callback is empty");
        }
        return this;
      } else {
        this.api.request("DELETE", "" + this.path + "/" + _id, {}, callback);
        return this;
      }
    };

    Address.prototype.verify = function(_object, callback) {
      var _i, _o, _ref;
      if (typeof _object !== "object") {
        if (typeof _object === "function") {
          callback = _object;
        }
        if (typeof callback === "function") {
          callback("Object can not be empty", null);
        } else {
          throw new Error("Object, Callback can not be empty");
        }
        return this;
      } else {
        _ref = _object.address_lines != null;
        for (_i in _ref) {
          _o = _ref[_i];
          _object["address_line" + (++_i)] = _o;
        }
        delete _object.address_lines;
        this.api.request("POST", "verify", _object, callback);
        return this;
      }
    };

    return Address;

  })(require("./common"));

}).call(this);
